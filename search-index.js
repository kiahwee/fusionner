var searchIndex = {};
searchIndex["fusionner"] = {"doc":"","items":[[3,"RepositoryConfiguration","fusionner","Configuration struct for the repository",null,null],[12,"uri","","URI to the repository remote.",0,null],[12,"checkout_path","","Path to checkout the repository to locally",0,null],[12,"fetch_refspecs","","Fetch refspecs to add to the repository being checked out.\nYou should make sure that the references you are watching is covered by these refspecs",0,null],[12,"push_refspecs","","Push refspecs to add to the repository being checked out.\nThis is not really useful at the moment because fusionner will always merge to\nrefs/fusionner/* and automatically adds the right refspecs for you",0,null],[12,"username","","Username to authenticate with the remote",0,null],[12,"password","","Password to authenticate with the remote",0,null],[12,"key","","Path to private key to authenticate with the remote. If the remote requrests for a key and\nthis is not specified, we will try to request the key from ssh-agent",0,null],[12,"key_passphrase","","Passphrase to the private key for authentication",0,null],[12,"signature_name","","The name to create merge commits under.\nIf unspecified, will use the global configuration in Git. Otherwise we will use some generic one",0,null],[12,"signature_email","","The email to create merge commits under.\nIf unspecified, will use the global configuration in Git. Otherwise we will use some generic one",0,null],[3,"WatchReferences","","&quot;Compiled&quot; watch reference",null,null],[0,"merger","","",null,null],[3,"Merger","fusionner::merger","",null,null],[3,"Note","","A `Note` is stored for each commit on the topic branches&#39; current head",null,null],[12,"_note_origin","","For human readers to know where this is from. A fixed string.",1,null],[12,"_version","","Version of the note. Currently version 1",1,null],[12,"merges","","List of merge commits for the current OID.\nThis is a `HashMap` where the keys are the target references\nBecause of the key, the list of Merges has the invariant that each target reference\nshall only have one entry each in the list of merge commits",1,null],[3,"Merge","","",null,null],[12,"merge_oid","","The OID for the merge commit",2,null],[12,"target_parent_oid","","The oid on the target branch that was used for the merge commit",2,null],[12,"target_parent_reference","","Reference of the target branch parent",2,null],[12,"parents_oid","","Any other merge parents, other than the target parent",2,null],[12,"merge_reference","","The reference for the merge commit",2,null],[4,"MergeReferenceNamer","","The default namer will create a reference at `refs/fusionner/{reference}/{target}`\nwhere `{target}` is the target reference, and `{reference}~ is the reference that is being\nmerged into target.",null,null],[13,"Default","","",3,null],[13,"Custom","","",3,null],[4,"ShouldMergeResult","","Enum returned by `Merger::should_merge` depending on the state of affairs",null,null],[13,"Merge","","",4,null],[13,"ExistingMergeInSameTargetReference","","",4,null],[13,"ExistingMergeInDifferentTargetReference","","",4,null],[12,"note","fusionner::merger::ShouldMergeResult","",4,null],[12,"merges","","",4,null],[12,"proposed_merge","","",4,null],[6,"MergeReferenceNamerCallback","fusionner::merger","Fn(reference: &amp;str, target_reference: &amp;str, oid: git2::Oid, target_oid: git2::Oid) -&gt; String",null,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"new","","",5,{"inputs":[{"name":"repository"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"add_note_refspecs","","Add refspecs to a remote to fetch/push commit notes, specific for fusionner",5,null],[11,"fetch_notes","","",5,null],[11,"find_note","","Find note for commit. Make sure you have fetched them first",5,null],[11,"add_note","","Returns OID of note",5,null],[11,"should_merge","","Determine if a merge should be made",5,null],[11,"merge","","Performs a merge and return a `Merge` entry intended for `oid`",5,null],[11,"check_and_merge","","Convenience method to check if a merge is required, and merge if needed.\nWill fetch remote merge references.\nWill push, if desired",5,null],[11,"notes_reference","","",5,null],[11,"new","","",1,{"inputs":[{"name":"hashmap"}],"output":{"name":"note"}}],[11,"new_with_merge","","",1,{"inputs":[{"name":"merge"}],"output":{"name":"note"}}],[11,"append_with_merge","","Returns the previous Merge if it existed",1,null],[11,"find_matching_merges","","",1,null],[11,"new","","",2,null],[11,"resolve","","",3,null],[11,"reference","","",3,null],[11,"add_default_refspecs","","",3,{"inputs":[{"name":"remote"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[0,"git","fusionner","",null,null],[3,"Repository","fusionner::git","",null,null],[12,"repository","","",6,null],[3,"Remote","","",null,null],[12,"remote","","",7,null],[3,"RemoteHead","","",null,null],[12,"is_local","","",8,null],[12,"oid","","",8,null],[12,"loid","","",8,null],[12,"name","","",8,null],[12,"symref_target","","",8,null],[3,"RefspecStr","","",null,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"flatten","","",8,null],[11,"flatten_clone","","",8,null],[11,"new","","",6,{"inputs":[{"name":"repository"},{"name":"repositoryconfiguration"}],"output":{"name":"repository"}}],[11,"clone_or_open","","",6,{"inputs":[{"name":"repositoryconfiguration"}],"output":{"name":"result"}}],[11,"open","","",6,{"inputs":[{"name":"repositoryconfiguration"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"repositoryconfiguration"}],"output":{"name":"result"}}],[11,"resolve_credentials","","",6,{"inputs":[{"name":"repositoryconfiguration"},{"name":"str"},{"name":"option"},{"name":"credentialtype"}],"output":{"name":"result"}}],[11,"transfer_progress_log","","",6,{"inputs":[{"name":"progress"}],"output":{"name":"bool"}}],[11,"sideband_progress_log","","",6,null],[11,"update_tips_log","","",6,{"inputs":[{"name":"str"},{"name":"oid"},{"name":"oid"}],"output":{"name":"bool"}}],[11,"remote","","",6,null],[11,"remote_name_or_default","","",6,{"inputs":[{"name":"option"}],"output":{"name":"string"}}],[11,"signature","","",6,null],[11,"disconnect","","",7,null],[11,"name","","",7,null],[11,"refspecs","","",7,null],[11,"remote_ls","","",7,null],[11,"head","","",7,null],[11,"resolve_head","","",7,null],[11,"fetch","","",7,null],[11,"push","","",7,null],[11,"generate_refspec","","For a given local reference, generate a refspec for the remote with the same path on remote\ni.e. refs/pulls/*  --&gt; refs/pulls/*:refs/remotes/origin/pulls/*",7,null],[11,"add_refspec","","",7,null],[11,"add_refspecs","","",7,null],[11,"resolve_target_ref","","",7,null],[11,"find_matching_refspec","","",7,{"inputs":[{"name":"refspecs"},{"name":"direction"},{"name":"str"}],"output":{"name":"option"}}],[11,"direction_eq","","",7,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"refspecstr"}}],[11,"force","","",9,null],[11,"refspec","","",9,null],[11,"set_force","","",9,null],[11,"to_string","","",9,null],[11,"src","","",9,null],[11,"dest","","",9,null],[11,"to_forced","","",9,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"fmt","","",9,null],[11,"decode","fusionner","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",10,null],[11,"new","","",10,null],[11,"resolve_watch_refs","","Given a set of Remote heads as advertised by the remote, return a set of remtoe heads\nwhich exist based on the watch references",10,null]],"paths":[[3,"RepositoryConfiguration"],[3,"Note"],[3,"Merge"],[4,"MergeReferenceNamer"],[4,"ShouldMergeResult"],[3,"Merger"],[3,"Repository"],[3,"Remote"],[3,"RemoteHead"],[3,"RefspecStr"],[3,"WatchReferences"]]};
initSearch(searchIndex);
